priority -50

###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

#! header
snippet #! "#!/usr/bin/env python" b
#!/usr/bin/env python
$0
endsnippet

snippet #!2 "#!/usr/bin/env python2" b
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
$0
endsnippet

snippet #!3 "#!/usr/bin/env python3" b
#!/usr/bin/env python3
$0
endsnippet

snippet "^# ?[uU][tT][fF]-?8" "# encoding: UTF-8" r
# -*- coding: utf-8 -*-
$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	${1:${VISUAL:main()}}
endsnippet

snippet with "with" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
	${3:${VISUAL:pass}}
$0
endsnippet

# snippet for "for loop" b
# for ${1:item} in ${2:iterable}:
# 	${3:${VISUAL:pass}}
# endsnippet

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3
GOOGLE  = 0x4
NUMPY   = 0x5
JEDI    = 0x6

SINGLE_QUOTES = "'"
DOUBLE_QUOTES = '"'


class Arg(object):
	def __init__(self, arg):
		self.arg = arg
		name_and_type = arg.split('=')[0].split(':')
		self.name = name_and_type[0].strip()
		self.type = name_and_type[1].strip() if len(name_and_type) == 2 else None

	def __str__(self):
		return self.name

	def __unicode__(self):
		return self.name

	def is_kwarg(self):
		return '=' in self.arg

	def is_vararg(self):
		return '*' in self.name


def get_args(arglist):
	args = []
	n = len(arglist)
	i = 0
	while i < n:
		l_bracket = 0
		start = i
		while i < n and (l_bracket > 0 or arglist[i] != ','):
			if arglist[i] == '[':
				l_bracket += 1
			elif arglist[i] == ']' and l_bracket > 0:
				l_bracket -= 1
			i += 1
		arg = arglist[start:i]
		if arg:
			args.append(Arg(arg))
		i += 1

	args = [arg for arg in args if arg.name != 'self']

	return args


def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES

def triple_quotes(snip):
	style = snip.opt("g:ultisnips_python_triple_quoting_style")
	if not style:
		return get_quoting_style(snip) * 3
	return (SINGLE_QUOTES if style == 'single' else DOUBLE_QUOTES) * 3

def triple_quotes_handle_trailing(snip, quoting_style):
	"""
	Generate triple quoted strings and handle any trailing quote char,
	which might be there from some autoclose/autopair plugin,
	i.e. when expanding ``"|"``.
	"""
	if not snip.c:
		# Do this only once, otherwise the following error would happen:
		# RuntimeError: The snippets content did not converge: â€¦
		_, col = vim.current.window.cursor
		line = vim.current.line

		# Handle already existing quote chars after the trigger.
		_ret = quoting_style * 3
		while True:
			try:
				nextc = line[col]
			except IndexError:
				break
			if nextc == quoting_style and len(_ret):
				_ret = _ret[1:]
				col = col+1
			else:
				break
		snip.rv = _ret
	else:
		snip.rv = snip.c

def get_style(snip):
	style = snip.opt("g:ultisnips_python_style", "normal")

	if    style == "doxygen": return DOXYGEN
	elif  style == "sphinx": return SPHINX
	elif  style == "google": return GOOGLE
	elif  style == "numpy": return NUMPY
	elif  style == "jedi": return JEDI
	else: return NORMAL


def format_arg(arg, style):
	if style == DOXYGEN:
		return "@param %s TODO" % arg
	elif style == SPHINX:
		return ":param %s: TODO" % arg
	elif style == NORMAL:
		return ":%s: TODO" % arg
	elif style == GOOGLE:
		return "%s (%s): TODO" % (arg, arg.type or "TODO")
	elif style == JEDI:
		return ":type %s: TODO" % arg
	elif style == NUMPY:
		return "%s : TODO" % arg


def format_return(style):
	if style == DOXYGEN:
		return "@return: TODO"
	elif style in (NORMAL, SPHINX, JEDI):
		return ":returns: TODO"
	elif style == GOOGLE:
		return "Returns: TODO"


def write_docstring_args(args, snip):
	if not args:
		snip.rv += ' {0}'.format(triple_quotes(snip))
		return

	snip.rv += '\n' + snip.mkline('', indent='')

	style = get_style(snip)

	if style == GOOGLE:
		write_google_docstring_args(args, snip)
	elif style == NUMPY:
		write_numpy_docstring_args(args, snip)
	else:
		for arg in args:
			snip += format_arg(arg, style)


def write_google_docstring_args(args, snip):
	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		snip += "Args:"
		snip.shift()
		for arg in args:
			snip += format_arg(arg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')

	if kwargs:
		snip += "Kwargs:"
		snip.shift()
		for kwarg in kwargs:
			snip += format_arg(kwarg, GOOGLE)
		snip.unshift()
		snip.rv += '\n' + snip.mkline('', indent='')


def write_numpy_docstring_args(args, snip):
	if args:
		snip += "Parameters"
		snip += "----------"

	kwargs = [arg for arg in args if arg.is_kwarg()]
	args = [arg for arg in args if not arg.is_kwarg()]

	if args:
		for arg in args:
			snip += format_arg(arg, NUMPY)
	if kwargs:
		for kwarg in kwargs:
			snip += format_arg(kwarg, NUMPY) + ', optional'
	snip.rv += '\n' + snip.mkline('', indent='')


def write_init_body(args, parents, snip):
	parents = [p.strip() for p in parents.split(",")]
	parents = [p for p in parents if p != 'object']

	for p in parents:
		snip += p + ".__init__(self)"

	if parents:
		snip.rv += '\n' + snip.mkline('', indent='')

	for arg in filter(lambda arg: not arg.is_vararg(), args):
		snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
	quote = get_quoting_style(snip)
	arg_format = quote + '_%s' + quote
	args = [arg_format % arg for arg in args]
	snip += '__slots__ = (%s,)' % ', '.join(args)


def write_function_docstring(t, snip):
	"""
	Writes a function docstring with the current style.

	:param t: The values of the placeholders
	:param snip: UltiSnips.TextObjects.SnippetUtil object instance
	"""
	snip.rv = ""
	snip >> 1

	args = get_args(t[2])
	if args:
		write_docstring_args(args, snip)

	style = get_style(snip)

	if style == NUMPY:
		snip += 'Returns'
		snip += '-------'
		snip += 'TODO'
	else:
		snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

def get_dir_and_file_name(snip):
	return os.getcwd().split(os.sep)[-1] + '.' + snip.basename

endglobal

########################################
# Class & Special Method Name Snippets #
########################################

snippet class "class with docstrings" b
class ${1:MyClass}(${2:object}):

	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)
`
		$0
endsnippet


snippet slotclass "class with slots and docstrings" b
class ${1:MyClass}(${2:object}):

	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
`!p
snip >> 1
args = get_args(t[4])
write_slots_args(args, snip)
`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)

write_init_body(args, t[2], snip)
`
		$0
endsnippet


snippet dcl "dataclass" b
@dataclass
class ${1:MyClass}:
	`!p snip.rv = triple_quotes(snip)`${2:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`
	${3:var_1}: ${4:int}
	${5:var_2}: ${6:float} = ${7:0}

	def ${8:total}(self): -> $6:
		return ${0:self.$3 * self.$5}
endsnippet


snippet contain "methods for emulating a container type" b
def __len__(self):
	${1:pass}

def __getitem__(self, key):
	${2:pass}

def __setitem__(self, key, value):
	${3:pass}

def __delitem__(self, key):
	${4:pass}

def __iter__(self):
	${5:pass}

def __reversed__(self):
	${6:pass}

def __contains__(self, item):
	${7:pass}
endsnippet


snippet context "context manager methods" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet


snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet


snippet desc "methods implementing descriptors" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet


snippet cmp "methods implementing rich comparison"
def __eq__(self, other):
	${1:pass}

def __ne__(self, other):
	${2:pass}

def __lt__(self, other):
	${3:pass}

def __le__(self, other):
	${4:pass}

def __gt__(self, other):
	${5:pass}

def __ge__(self, other):
	${6:pass}

def __cmp__(self, other):
	${7:pass}
endsnippet


snippet repr "methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}

def __unicode__(self):
	${3:pass}
endsnippet


# note: reflected operands and augmented arithmeitc assignements have been
# intentionally ommited to reduce verbosity.
snippet numeric "methods for emulating a numeric type" b
def __add__(self, other):
	${1:pass}

def __sub__(self, other):
	${2:pass}

def __mul__(self, other):
	${3:pass}

def __div__(self, other):
	${4:pass}

def __truediv__(self, other):
	${5:pass}

def __floordiv__(self, other):
	${6:pass}


def __mod__(self, other):
	${7:pass}

def __divmod__(self, other):
	${8:pass}

def __pow__(self, other):
	${9:pass}


def __lshift__(self, other):
	${10:pass}

def __rshift__(self, other):
	${11:pass}

def __and__(self, other):
	${12:pass}

def __xor__(self, other):
	${13:pass}

def __or__(self, other):
	${14:pass}


def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __abs__(self):
	${17:pass}

def __invert__(self):
	${18:pass}


def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}


def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}


def __index__(self):
	${24:pass}

def __coerce__(self, other):
	${25:pass}
endsnippet

snippet deff "function or class method"
def ${1:fname}(`!p snip.rv = "self, " if snip.indent else ""`$2):
	$0
endsnippet

snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`
	${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet


##############
# PROPERTIES #
##############
snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
def ${1:name}():
	`!p snip.rv = triple_quotes(snip) if t[2] else ''
`${2:TODO: Docstring for $1.}`!p
if t[2]:
	snip >> 1

	style = get_style(snip)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)
else:
	snip.rv = ""`
	def fget(self):
		return self._$1$0

	def fset(self, value):
		self._$1 = value
	return locals()

$1 = property(**$1(), doc=$1.__doc__)
endsnippet


############################
# If / Else / Elif / Match #
############################
snippet if "If" b
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet match "Structural pattern matching" b
match ${1:expression}:
	case ${2:pattern_1}:
		${3:pass}
	case ${4:pattern_2}:
		${0:pass}
endsnippet

snippet matchw "Pattern matching with wildcard" b
match ${1:expression}:
	case ${2:pattern_1}:
		${3:pass}
	case _:
		${0:pass}
endsnippet


##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "Try / Except / Else" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet


######################
# Assertions & Tests #
######################

snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}}, ${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${1:${VISUAL:expression}})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:${VISUAL:expression}})
endsnippet

snippet aae "Assert almost equal" b
self.assertAlmostEqual(${1:${VISUAL:first}}, ${2:second})
endsnippet

snippet ar "Assert raises" b
self.assertRaises(${1:exception}, ${2:${VISUAL:func}}${3/.+/, /}${3:arguments})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${1:${VISUAL:expression}})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${1:${VISUAL:expression}})
endsnippet

snippet testcase "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):

	`!p snip.rv = triple_quotes(snip)`${3:Test case docstring.}`!p snip.rv = triple_quotes(snip)`

	def setUp(self):
		${4:pass}

	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		${7:${VISUAL:pass}}
endsnippet

snippet " "triple quoted string (double quotes)" b
"""
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet ' "triple quoted string (single quotes)" b
'''
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, "'")`
endsnippet

snippet doc "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)`
${1:${VISUAL:doc}}
`!p snip.rv = triple_quotes(snip)`
endsnippet

snippet pmdoc "pocoo style module doc string" b
# -*- coding: utf-8 -*-
"""
	`!p snip.rv = get_dir_and_file_name(snip)`
	`!p snip.rv = '~' * len(get_dir_and_file_name(snip))`

	${1:DESCRIPTION}

	:copyright: (c) `date +%Y` by ${2:YOUR_NAME}.
	:license: ${3:LICENSE_NAME}, see LICENSE for more details.
"""
$0
endsnippet

snippet scatterplot "scatter plot" b
fig, ax = plt.subplots(figsize=(6, 4))
# colors = ['0C5DA5', '00B945', 'FF9500', 'FF2C00', '845B97', '474747', '9e9e9e']

##########
#  plot  #
##########
x = np.linspace(0, 4*np.pi, 1000)
y1 = np.sin(x)
y2 = np.cos(x)
p1 = ax.plot(x, y1, lw=2.0, label="$V_{\mathrm{in1}}$")
p2 = ax.plot(x, y2, lw=2.0, label="$V_{\mathrm{in2}}$")

###################
#  plot settings  #
###################
# import matplotlib.ticker as ticker
# ax.xaxis.set_major_formatter(ticker.EngFormatter(unit=''))
# ax.set_title("")
ax.set_xlabel("$x$")
ax.set_ylabel("$y$")
# ax.set_ylim([0, 1])
# ax.set_xlim([0, 1])
# ax.set_yscale("")
plt.grid(color='gray', alpha=0.5, linestyle='dashed', linewidth=0.5)

############
#  legend  #
############
lines = p1 + p2
labels = [l.get_label() for l in lines]
ax.legend(lines, labels, loc='upper right', bbox_to_anchor=(1.35, 1.025))
#ax.legend(loc='upper center')

##########
#  save  #
##########
plt.show()
#fig.savefig(save_location + "scatterplot.pdf", bbox_inches="tight")
endsnippet

snippet twinplot "twin plot" b
fig, ax1 = plt.subplots(figsize=(6, 4))
ax2 = ax1.twinx()
ax3 = ax1.twinx()

# offset the right spine of ax2
ax3.spines["right"].set_position(("axes", 1.2))

##########
#  plot  #
##########
x = np.linspace(0, 4*np.pi, 1000)
y1 = np.sin(x)
y2 = np.cos(x)
y3 = y1 + y2
p1 = ax1.plot(x, y1, lw=2.0, color="red", label="$\sin(x)$")
p2 = ax2.plot(x, y2, lw=2.0, color="orange", label="$\cos(x)$")
p3 = ax3.plot(x, y3, lw=2.0, color="green", ls="dashed", label="$\sin(x) + \cos(x)$")

###################
#  plot settings  #
###################
# ax.set_title("")
ax1.set_xlabel("$x$")
ax1.set_ylabel("$\sin(x)$")
ax2.set_ylabel("$\cos(x)$")
ax3.set_ylabel("$\sin(x) + \cos(x)$")
# ax1.set_ylim([0, 1])
# ax1.set_xlim([0, 1])
# ax1.set_yscale("")
plt.grid(color='gray', alpha=0.5, linestyle='dashed', linewidth=0.5)

############
#  legend  #
############
lines = p1 + p2 + p3
labels = [l.get_label() for l in lines]
ax1.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=len(lines), handlelength=1.2, columnspacing=2)

##########
#  save  #
##########
plt.show()
#fig.savefig(save_location + "twinplot.svg", bbox_inches="tight")
endsnippet

snippet contourplot "contour plot" b
def plot_contour(func, xlim=(-5, 5), ylim=(-5, 5), zlim=(-5, 5), levels=10):

    ################
    #  plot setup  #
    ################
    x = np.linspace(xlim[0], xlim[1], 100)
    y = np.linspace(ylim[0], ylim[1], 100)
    X, Y = np.meshgrid(x, y)

    ##############
    #  function  #
    ##############
    Z = func(X, Y)

    ##########
    #  plot  #
    ##########
    fig, ax = plt.subplots(figsize=(6, 6))
    p1 = ax.contour(X, Y, Z, levels=levels, cmap='viridis')
    ax.clabel(p1, inline=True, fontsize=10, fmt='%1.1f')

    ###################
    #  plot settings  #
    ###################
    ax.set_title("")
    ax.set_xlabel("$x$")
    ax.set_ylabel("$y$")
    ax.set_ylim(*xlim)
    ax.set_xlim(*ylim)
    ax.grid(color='gray', alpha=0.5, linestyle='dashed', linewidth=0.5)

    ##########
    #  save  #
    ##########
    plt.show()
    #fig.savefig(save_location + "contourplot.pdf", bbox_inches="tight")

# example
func = lambda x, y: -np.exp(-(x*y-3/2)**2 - (y-3/2)**2)
plot_contour(func, xlim=(0, 3), ylim=(0, 3))
endsnippet

snippet histplot "histogram plot" b
def plot_histogram(data, num_bins=10, filter_data=False):
    #################
    #  filter data  #
    #################
    # compute the interquartile range (IQR) and use it to filter out outliers
    if filter_data:
        q1, q3 = np.percentile(data, [25, 75])
        iqr = q3 - q1
        lower_bound = q1 - 1.5 * iqr
        upper_bound = q3 + 1.5 * iqr
        data_filtered = data[(data >= lower_bound) & (data <= upper_bound)]
    else:
        data_filtered = data

    ##########
    #  plot  #
    ##########
    fig, ax = plt.subplots(figsize=(8, 6))
    n, bins, patches = ax.hist(data_filtered, bins=num_bins, edgecolor='white', linewidth=1.2, alpha=0.8)

    ###################
    #  plot settings  #
    ###################
    ax.set_title("Histogram of ...")
    ax.set_xlabel("Value")
    ax.set_ylabel("Frequency")
    ax.spines["top"].set_visible(False)
    ax.spines["right"].set_visible(False)
    ax.grid(axis="y", alpha=0.5)

    ##########
    #  save  #
    ##########
    plt.show()
    #fig.savefig(save_location + "histplot.pdf", bbox_inches="tight")

# example
data = np.random.normal(loc=10, scale=3, size=1000)
plot_histogram(data)
endsnippet

snippet barplot "bar plot" b
def plot_bar_chart(data, labels, horizontal=False, label_top=False):

    fig, ax = plt.subplots(figsize=(8, 6))

    ##########
    #  plot  #
    ##########
    if horizontal:
        ax.barh(labels, data, height=0.6, color='cornflowerblue', edgecolor='black', linewidth=1.2)

        if label_top:
            for i, v in enumerate(data):
                ax.text(v*1.05, i, str(v), color='black', fontweight='bold', ha='left', va='center')
    else:
        ax.bar(labels, data, width=0.6, color='cornflowerblue', edgecolor='black', linewidth=1.2)
        if label_top:
            for i, v in enumerate(data):
                ax.text(i, v*1.05, str(v), color='black', fontweight='bold', ha='center', va='bottom')

    ###################
    #  plot settings  #
    ###################
    if horizontal:
        ax.grid(axis="x", alpha=0.5)
        ax.set_xlim([0, np.max(data) * 1.1])
        ax.set_xlabel("Value")
        ax.set_ylabel("Category")
    else:
        ax.grid(axis="y", alpha=0.5)
        ax.set_ylim([0, np.max(data) * 1.1])
        ax.set_xlabel("Category")
        ax.set_ylabel("Value")

    ax.set_title("Bar Chart of ...")
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    plt.tight_layout()

    ##########
    #  save  #
    ##########
    plt.show()
    #fig.savefig(save_location + "barchart.pdf", bbox_inches="tight")

# example
data = np.array([10, 20, 30, 40, 50])
labels = ['A', 'B', 'C', 'D', 'E']
plot_bar_chart(data, labels, horizontal=True, label_top=True)
endsnippet

snippet groupbarplot "bar plot" b
def plot_group_bar_chart(data, labels, groups, horizontal=False, label_top=False):

    fig, ax = plt.subplots(figsize=(8, 6))

    ################
    #  plot setup  #
    ################
    num_groups = len(groups)
    num_bars = data.shape[0]
    bar_width = 0.2
    x_positions = np.arange(num_bars)

    ##########
    #  plot  #
    ##########
    # plot the bars for each group
    for i, group in enumerate(groups):
        x = x_positions + i * bar_width
        if horizontal:
            ax.barh(x, data[:, i], height=bar_width, label=group, edgecolor="black", linewidth=1.2)
        else:
            ax.bar(x, data[:, i], width=bar_width, label=group, edgecolor="black", linewidth=1.2)


        if label_top:
            for j, v in enumerate(data[:, i]):
                if horizontal:
                    ax.text(v*1.05, x[j], str(v), color='black', fontweight='bold', ha='left', va='center')
                else:
                    ax.text(x[j], v*1.05, str(v), color='black', fontweight='bold', ha='center', va='bottom')

    ###################
    #  plot settings  #
    ###################
    if horizontal:
        ax.set_yticks(x_positions + bar_width * (num_groups - 1) / 2)
        ax.set_yticklabels(labels)
        ax.grid(axis="x", alpha=0.5)
        ax.set_xlim([0, np.max(data) * 1.1])
        ax.set_xlabel("Value")
        ax.set_ylabel("Category")
    else:
        ax.set_xticks(x_positions + bar_width * (num_groups - 1) / 2)
        ax.set_xticklabels(labels)
        ax.grid(axis="y", alpha=0.5)
        ax.set_ylim([0, np.max(data) * 1.1])
        ax.set_xlabel("Category")
        ax.set_ylabel("Value")

    ax.set_title("Bar Chart of ...")
    ax.spines["top"].set_visible(False)
    ax.spines["right"].set_visible(False)
    ax.legend()
    plt.tight_layout()

    ##########
    #  save  #
    ##########
    plt.show()
    #fig.savefig(save_location + "groupbarplot.pdf", bbox_inches="tight")

# example
data = np.array([[10, 20, 5], [30, 40, 15], [50, 60, 12]])
labels = ['A', 'B', 'C']
groups = ['Dogs', 'Cats', 'Dolphins']
plot_group_bar_chart(data, labels, groups, horizontal=False, label_top=True)
endsnippet

snippet bodeplot "Bode plot" b
def evaluate_tf(tf, freq_min=1e-2, freq_max=1e3, points_per_decade=20):

    # define the transfer function expression as a lambda function
    tf_expr = lambda s: eval(tf)

    # generate sampling frequency
    num_decades = int(np.ceil(np.log10(freq_max) - np.log10(freq_min)))
    num_points = points_per_decade * num_decades + 1
    frequency = np.logspace(np.log10(freq_min), np.log10(freq_max), num=num_points)

    # complex frequency
    omega = 2 * np.pi * frequency
    s = 1j * omega

    # evaluate the transfer function over the complex plane
    freq_resp = tf_expr(s)

    return omega, freq_resp

def bode_plot(freq_resp, freq, xlim=None):

    ################
    #  plot setup  #
    ################
    mag = 20.0 * np.log10(abs(freq_resp))
    phase = np.rad2deg(np.unwrap(np.angle(freq_resp)))

    ##########
    #  plot  #
    ##########
    fig, ax_mag = plt.subplots(figsize=(10, 5))
    p1 = ax_mag.plot(freq, mag, label="gain")

    ax_phase = ax_mag.twinx()
    p2 = ax_phase.plot(freq, phase, label="phase", linestyle="dashed", color="red")

    ###################
    #  plot settings  #
    ###################
    # magnitude axis
    ax_mag.set_xlabel("Frequency (rad/s)")
    ax_mag.set_ylabel("Magnitude (dB)")
    ax_mag.set_xscale("log")

    # phase axis
    ax_phase.set_ylabel("Phase (deg)")
    # ax_phase.set_xscale("log")

    # add grid
    ax_mag.grid(color="gray", alpha=0.5, linestyle="dashed", linewidth=0.5, which="both")

    # limit the frequency
    if xlim:
        ax_mag.set_xlim(*xlim)

    # add legend
    lines = p1 + p2
    labels = [l.get_label() for l in lines]
    ax_mag.legend(lines, labels)

    ##########
    #  save  #
    ##########
    plt.show()
    #fig.savefig(save_location + "bodeplot.pdf", bbox_inches="tight")

# example
tf_expr = "((s+1)*(s+10000))/((s+100)**2)"
omega, freq_resp = evaluate_tf(tf_expr, freq_max=1e5)
bode_plot(freq_resp, omega, xlim=[1e-1, 1e5])
endsnippet

snippet nyquistplot "Nyquist plot" b
def evaluate_tf(tf, freq_min=1e-2, freq_max=1e3, points_per_decade=50):

    # define the transfer function expression as a lambda function
    tf_expr = lambda s: eval(tf)

    # generate sampling frequency
    num_decades = int(np.ceil(np.log10(freq_max) - np.log10(freq_min)))
    num_points = points_per_decade * num_decades + 1
    frequency = np.logspace(np.log10(freq_min), np.log10(freq_max), num=num_points)

    # complex frequency
    omega = 2 * np.pi * frequency
    s = 1j * omega

    # evaluate the transfer function over the complex plane
    freq_resp = tf_expr(s)

    return omega, freq_resp

def nyquist_plot(freq_resp, xlim=(-1.2, 1), ylim=(-1, 1)):

    ##########
    #  plot  #
    ##########
    # plot the Nyquist plot for positive frequencies
    fig, ax = plt.subplots()
    ax.plot(np.real(freq_resp), np.imag(freq_resp), label="Positive Frequencies")

    # reflect the plot across the real axis for negative frequencies
    ax.plot(np.real(freq_resp), -np.imag(freq_resp), "b--", label="Nositive Frequencies")

    # mark the critical frequency with a red cross
    ax.plot([-1, -1], [0, 0], "rx", label="-1 + 0j")

    ###################
    #  plot settings  #
    ###################
    # add labels and title
    ax.set_title("Nyquist Plot")
    ax.set_xlabel("Real")
    ax.set_ylabel("Imaginary")
    ax.grid(which="both", linestyle="--", linewidth=0.5)
    ax.set_xlim(*xlim)
    ax.set_ylim(*ylim)

    ##########
    #  save  #
    ##########
    plt.show()
    fig.savefig(save_location + "nyquistplot.pdf", bbox_inches="tight")

# example
tf_expr = "1 / (s**2 + s + 1)"
omega, freq_resp = evaluate_tf(tf_expr, freq_min=1e-5, points_per_decade=100)
nyquist_plot(freq_resp, xlim=(-1.2, 1.2), ylim=(-1.1, 1.1))
endsnippet

snippet fftplot "frequency fesponse plot" b
def plot_frequency_response(signal, fs):

    ################
    #  plot setup  #
    ################
    # compute the Fourier Transform of the signal
    Y = np.fft.fft(signal)/len(signal)

    # compute the frequency axis
    freq = np.fft.fftfreq(len(signal), 1/fs)

    ##########
    #  plot  #
    ##########
    fig, ax = plt.subplots(figsize=(8, 4))
    # plt.plot(freq, np.abs(Y)) # plot positive and negative frequencies
    # plot only the positive frequencies
    ax.plot(freq[:len(freq)//2], 2*np.abs(Y)[:len(Y)//2], color='blue', marker='o', fillstyle='none', markevery=10)

    ##################
    #  plot setting  #
    ##################
    ax.set_title('Frequency Response')
    ax.set_xlabel('Frequency (Hz)')
    ax.set_ylabel('Amplitude')
    ax.grid(color="gray", alpha=0.5, linestyle="dashed", linewidth=0.5, which="both")

    ##########
    #  save  #
    ##########
    # fig.savefig(save_location + "fftplot.pdf", bbox_inches="tight")
    plt.show()

# example
periods = 1 # periods of the signal to capture (more sample is better)
fs = 1000 # sampling frequency
t = np.arange(0, periods, 1/fs) # sampling time points
y = np.sin(2*np.pi*20*t) + np.sin(2*np.pi*400*t)
plot_frequency_response(y, fs)
endsnippet


# vim:ft=snippets:
