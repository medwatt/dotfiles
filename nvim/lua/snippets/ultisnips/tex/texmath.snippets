priority -50

##############
# MATH STUFF #
##############

global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

# def math():
#     return vim.eval(r"""luaeval("require('main.scripts.mathmode').in_mathzone()")""") == 'True'

# def comment():
#     return vim.eval(r"""luaeval("require('main.scripts.mathmode').in_mathzone()")""") == 'True'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and x != '0'

def make_table(snip):
	match_str = re.search(r"([A-Za-z]+)(\d+)x(\d+)", snip.buffer[snip.line])
	f_str = match_str.group(1)
	rows  = match_str.group(2)
	cols  = match_str.group(3)

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{" + f_str + "rix}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{" + f_str + "rix}\n$0"

	snip.expand_anon(final_str)

def greekLetter(letter):
	greek = {
		"a" : "alpha",
		"b" : "beta",
		"g" : "gamma",
		"d" : "delta",
		"e" : "epsilon",
		"ve": "varepsilon",
		"z" : "zeta",
		"et": "eta",
		"t" : "theta",
		"vt": "vartheta",
		"i" : "iota",
		"k" : "kappa",
		"l" : "lambda",
		"m" : "mu",
		"n" : "nu",
		"xi": "xi",
		"p" : "pi",
		"r" : "rho",
		"vr": "varrho",
		"s" : "sigma",
		"ta": "tau",
		"u" : "upsilon",
		"f" : "phi",
		"vf": "varphi",
		"x" : "chi",
		"ps": "psi",
		"w" : "omega"
	}
	if letter in greek:
		return greek[letter]
	else:
		return letter

endglobal

############
# Brackets #
############

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right]$0
endsnippet

context "math()"
snippet lr< "leftangle rightangle" iA
\left< ${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right|$0
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil$0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

###########
# General #
###########

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

#############
# Fractions #
#############

context "math()"
snippet // "fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

##############
# Subscripts #
##############

context "math()"
snippet '(\b[A-Za-z])(\d)' "auto subscript" rA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '(\b[A-Za-z])_(\d\d)' "auto subscript2" rA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

###########
# Accents #
###########

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "vv" "vec" riA
\vec{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])vv" "vec" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

##############
# Set Theory #
##############

context "math()"
snippet inn "in " iA
\in
endsnippet

context "math()"
snippet notin "not in " iA
\not\in
endsnippet

context "math()"
snippet || "mid" iA
\mid
endsnippet

context "math()"
snippet c; "subset" iA
\subset
endsnippet

context "math()"
snippet \subset= "subset" iA
\\subseteq
endsnippet

context "math()"
snippet n; "cap" iA
\cap
endsnippet

context "math()"
snippet u; "cup" iA
\cup
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet OO "emptyset" iA
\O
endsnippet

#########
# Logic #
#########

context "math()"
snippet => "implies" Ai
\implies
endsnippet

context "math()"
snippet <= "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" iA
\iff
endsnippet

context "math()"
snippet EE "there exits" iA
\exists
endsnippet

context "math()"
snippet AA "forall" iA
\forall
endsnippet

context "math()"
snippet thus "therefore" iA
\therefore
endsnippet

########
# Dots #
########

context "math()"
priority 100
snippet ** "cdot" iA
\cdot
endsnippet

context "math()"
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

#################
# Relationships #
#################

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet != "equals" iA
\neq
endsnippet

context "math()"
snippet <= "leq" iA
\le
endsnippet

context "math()"
snippet >= "geq" iA
\ge
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet ~~ "~" iA
\sim
endsnippet

##########
# Arrows #
##########

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

###########
# Symbols #
###########

context "math()"
snippet xx "cross" iA
\times
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla
endsnippet

context "math()"
snippet +- "plus minus" iA
\pm
endsnippet

context "math()"
snippet -+ "minus plus" iA
\mp
endsnippet

context "math()"
snippet NN "n" iA
\N
endsnippet

context "math()"
snippet RR "real" iA
\R
endsnippet

context "math()"
snippet QQ "Q" iA
\Q
endsnippet

context "math()"
snippet ZZ "Z" iA
\Z
endsnippet

context "math()"
snippet '([A-Za-z]{1,2})\?' "Greek Letters" rA
\\`!p snip.rv = greekLetter(match.group(1))`
endsnippet

context "math()"
snippet '([A-Za-z])"' "Double Struck Letters" rA
\\mathbb{`!p snip.rv = match.group(1).upper()`}
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

#############
#Expressions#
#############

context "math()"
snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context "math()"
snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1$0
endsnippet

context "math()"
snippet binom "binomial coefficients" iA
\binom{${1:n}}{${2:k}}$0
endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

context "math()"
snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}}$0
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}}$0
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}}$0
endsnippet

pre_expand "make_table(snip)"
snippet "\b(pmat|bmat)(\d+)x(\d+)" "Create matrix" r
endsnippet

#############
# Integrals #
#############

priority 300
context "math()"
snippet dint "definit integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} {\mathrm{d} ${4:x}}$0
endsnippet

##########
# Others #
##########


##############
#Environments#
##############

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet mx "Math" wA
\[
${1:${VISUAL}}
\]$0
endsnippet

snippet eq "Equation with a number" b
\begin{equation}
	${0:${VISUAL}}
\end{equation}
endsnippet

snippet eqn "Equation without a number" b
\begin{equation*}
	${0:${VISUAL}}
\end{equation*}
endsnippet

snippet al "Align" b
\begin{align}
	${0:${VISUAL}}
\end{align}
endsnippet

snippet aln "Align without a number" b
\begin{align*}
	${0:${VISUAL}}
\end{align*}
endsnippet

snippet eqa "Equation array" b
\begin{eqnarray}
	${1:${VISUAL}} & ${2:${VISUAL}} & ${0:${VISUAL}}
\end{eqnarray}
endsnippet

snippet eqan "Equation array without a number" b
\begin{eqnarray*}
	${1:${VISUAL}} & ${2:${VISUAL}} & ${0:${VISUAL}}
\end{eqnarray*}
endsnippet

################
# Python Stuff #
################

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

##########
# OTHERS #
##########

snippet dx "derivative" w
\frac{\mathrm{d} $1}{\mathrm{d} $2}$0
endsnippet

snippet dxn "nth derivative" w
\frac{\mathrm{d}^${1:2} $2}{\mathrm{d} $3^{$1}}$0
endsnippet

snippet pp "partial derivative" w
\frac{\partial $1}{\partial $2}$0
endsnippet

snippet bs "bold symbol" w
\boldsymbol{$1}$0
endsnippet

snippet tt "text" w
\text{$1}$0
endsnippet

snippet tc "text color" w
\textcolor{${1:blue}}{$2}$0
endsnippet

snippet SI "SI unit" w
\SI{${1:${VISUAL}}}{${2}}
endsnippet

# vim:ft=snippets:
